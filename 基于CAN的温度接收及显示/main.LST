C51 COMPILER V9.01   MAIN                                                                  07/19/2016 15:17:56 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*************************************************
   2          *功能: CEPARK CAN开发板-CAN两个节点测试
   3          *说明：将两块CAN总线开发板CANH---CANH,CANL---CANL相连
   4          *      连接无误后分别按动中断按键。相应的数码管显示加一。
   5          *      并通过CAN总线发送到另一块数码管上显示。
   6          *芯片：STC89C52RC
   7          *跳线：无
   8           
   9          *版本：CEPARK CAN总线开发板v3.0
  10          *网店: cepark.taobao.com
  11          *论坛：bbs.cepark.com 
  12          *时间：2014.8
  13          
  14          *电子工程师网络课堂 www.eeskill.com （畅学电子网）
  15          *我们的口号：让不懂can的学习者，也能轻松玩转can
  16          ****************************************************/ 
  17          #include <reg52.h>
  18          #include "sjapelican.h"
  19          #include "config.h"
  20          
  21          //INT0按键为计数按键
  22          void INT0_Data(void) interrupt 0
  23          {
  24   1          EA = 0;
  25   1          Txd_data++; //存储计数结果，并为待发送的数据
  26   1              Peli_TXD();
  27   1          EA = 1;
  28   1      }
  29          //接收数据函数，在中断服务程序中调用
  30          void Peli_RXD(void) interrupt 2
  31          {
  32   1      
  33   1          uint8 data Status;
  34   1          EA = 0;//关CPU中断
  35   1      
  36   1          Status = SJA_IR;
  37   1          if(Status & RI_BIT)
  38   1          {//IR.0 = 1 接收中断
  39   2              RX_buffer[0] =  SJA_RBSR0;
  40   2              RX_buffer[1] =  SJA_RBSR1;
  41   2              RX_buffer[2] =  SJA_RBSR2;
  42   2              RX_buffer[3] =  SJA_RBSR3;
  43   2              RX_buffer[4] =  SJA_RBSR4;
  44   2              RX_buffer[5] =  SJA_RBSR5;
  45   2              RX_buffer[6] =  SJA_RBSR6;
  46   2              RX_buffer[7] =  SJA_RBSR7;
  47   2              RX_buffer[8] =  SJA_RBSR8;
  48   2              RX_buffer[9] =  SJA_RBSR9;
  49   2              RX_buffer[10] =  SJA_RBSR10;
  50   2              RX_buffer[11] =  SJA_RBSR11;
  51   2              RX_buffer[12] =  SJA_RBSR12;
  52   2      
  53   2              SJA_CMR = RRB_BIT;//释放接收缓冲器位
  54   2              Status = SJA_ALC;//释放仲裁随时捕捉寄存器
  55   2              Status = SJA_ECC;//释放错误代码捕捉寄存器
C51 COMPILER V9.01   MAIN                                                                  07/19/2016 15:17:56 PAGE 2   

  56   2          }
  57   1          SJA_IER = RIE_BIT;// .0=1--接收中断使能；
  58   1      
  59   1              Rxd_data = RX_buffer[5];
  60   1              Rxd_data1 = RX_buffer[6];       //整数
  61   1              Rxd_data2 = RX_buffer[7];       //小数
  62   1      
  63   1          EA = 1;//打开CPU中断
  64   1      }
  65          //CPU初始化
  66          void MCU_Init(void)
  67          {
  68   1              SJA_RST = 0;//SJA1000复位有效
  69   1              mDelay(10);     //延时
  70   1          SJA_RST = 1;//CAN总线复位管脚,复位无效
  71   1          SJA_CS = 0;//CAN总线片选有效
  72   1          EX1 = 1;//外部中断1使能；CAN总线接收中断
  73   1          IT1 = 1;//CAN总线接收中断，低电平触发
  74   1          IT0 = 1;//外部中断0负边沿触发
  75   1          EX0 = 1;//打开外部中断0
  76   1          EA = 1; //打开总中断
  77   1      }
  78          //主函数
  79          void main(void)
  80          {
  81   1              MCU_Init();
  82   1          Peli_Init();
  83   1          while(1)   LED_Disp_Seg7();
  84   1      }
  85          //SJA1000 的初始化
  86          void Peli_Init(void)
  87          {
  88   1          uint8 bdata Status;
  89   1          do
  90   1          {//  .0=1---reset MODRe,进入复位模式，以便设置相应的寄存器
  91   2           //防止未进入复位模式，重复写入
  92   2              SJA_MOD = RM_BIT |AFM_BIT;
  93   2              Status = SJA_MOD ;
  94   2          }
  95   1          while(!(Status & RM_BIT));
  96   1      
  97   1          SJA_CDR  = CANMode_BIT|CLKOff_BIT;// CDR.3=1--时钟关闭, .7=0---basic CAN, .7=1---Peli CAN
  98   1          SJA_BTR0 = 0x03;
  99   1          SJA_BTR1 = 0x1c;//16M晶振，波特率125Kbps
 100   1          SJA_IER  = RIE_BIT;// .0=1--接收中断使能；  .1=0--关闭发送中断使能
 101   1          SJA_OCR  = NormalMode|Tx0PullDn|OCPOL1_BIT|Tx1PullUp;// 配置输出控制寄存器
 102   1          SJA_CMR  = RRB_BIT;//释放接收缓冲器
 103   1      
 104   1          SJA_ACR0  = 0x01;
 105   1          SJA_ACR1  = 0x02;
 106   1          SJA_ACR2  = 0x03;
 107   1          SJA_ACR3  = 0x04;//初始化标示码
 108   1      
 109   1          SJA_AMR0  = 0xff;
 110   1          SJA_AMR1  = 0xff;
 111   1          SJA_AMR2  = 0xff;
 112   1          SJA_AMR3  = 0xff;//初始化掩码
 113   1      
 114   1          do
 115   1          {
 116   2              SJA_MOD   = AFM_BIT;
 117   2              Status  = SJA_MOD;
C51 COMPILER V9.01   MAIN                                                                  07/19/2016 15:17:56 PAGE 3   

 118   2           }
 119   1          while( Status & RM_BIT );
 120   1      
 121   1      }
 122          //发送数据函数
 123          void Peli_TXD( void )
 124          {
 125   1          uint8 data Status;
 126   1      //初始化标示码头信息
 127   1          TX_buffer[0] = 0x88;//.7=0扩展帧；.6=0数据帧; .3=1数据长度
 128   1          TX_buffer[1] = 0x01;//本节点地址
 129   1          TX_buffer[2] = 0x02;//
 130   1          TX_buffer[3] = 0x03;//
 131   1          TX_buffer[4] = 0x04;//
 132   1      
 133   1      //初始化发送数据单元
 134   1          TX_buffer[5]  = Txd_data;
 135   1          TX_buffer[6]  = 0x22;
 136   1          TX_buffer[7]  = 0x33;
 137   1          TX_buffer[8]  = 0x44;//
 138   1          TX_buffer[9]  = 0x55;//
 139   1          TX_buffer[10] = 0x66;//
 140   1          TX_buffer[11] = 0x77;//
 141   1          TX_buffer[12] = 0x88;//
 142   1      
 143   1          do
 144   1          {
 145   2              Status = SJA_SR;
 146   2          }
 147   1          while( Status & RS_BIT);  //SR.4=1 正在接收，等待
 148   1          
 149   1          do
 150   1          {
 151   2              Status = SJA_SR;
 152   2          }
 153   1          while(!(Status & TCS_BIT)); //SR.3=0,发送请求未处理完，等待
 154   1      
 155   1          do
 156   1          {
 157   2              Status = SJA_SR;
 158   2          }
 159   1          while(!(Status & TBS_BIT)); //SR.2=0,发送缓冲器被锁。等待
 160   1      
 161   1          SJA_TBSR0  = TX_buffer[0];
 162   1          SJA_TBSR1  = TX_buffer[1];
 163   1          SJA_TBSR2  = TX_buffer[2];
 164   1          SJA_TBSR3  = TX_buffer[3];
 165   1          SJA_TBSR4  = TX_buffer[4];
 166   1          SJA_TBSR5  = TX_buffer[5];
 167   1          SJA_TBSR6  = TX_buffer[6];
 168   1          SJA_TBSR7  = TX_buffer[7];
 169   1          SJA_TBSR8  = TX_buffer[8];
 170   1          SJA_TBSR9  = TX_buffer[9];
 171   1          SJA_TBSR10 = TX_buffer[10];
 172   1          SJA_TBSR11 = TX_buffer[11];
 173   1          SJA_TBSR12  = TX_buffer[12];
 174   1      
 175   1          SJA_CMR = TR_BIT;//置位发送接收请求
 176   1      }
 177          //延时函数
 178          void mDelay(uint16 mtime)
 179          {
C51 COMPILER V9.01   MAIN                                                                  07/19/2016 15:17:56 PAGE 4   

 180   1              for(; mtime > 0; mtime--)
 181   1              {
 182   2                      uint8 j = 244;
 183   2                      while(--j);
 184   2              }
 185   1      }
 186          
 187          int xiaoshu,ge,shi,bai;
 188          
 189          //数码管显示函数
 190          void LED_Disp_Seg7()
 191          {
 192   1         LedCtrl = LedCtrl | 0xf0;
 193   1      
 194   1         xiaoshu =    (Rxd_data2*625)/1000;
 195   1         ge = Rxd_data1 % 10;
 196   1         shi = Rxd_data1%100/10;
 197   1         bai = Rxd_data1/100;
 198   1         
 199   1         if(xiaoshu)
 200   1             DisBuff[0]   = xiaoshu;//小数
 201   1         if(ge)
 202   1             DisBuff[1]   = ge; //个位数
 203   1         if(shi)
 204   1             DisBuff[2]   = shi;         //十位数
 205   1         if(bai)
 206   1             DisBuff[3]   = bai; //百位数
 207   1        
 208   1         LedPort = LED_Disp[DisBuff[0]];
 209   1         LedCtrl = LedCtrl & 0x7f;
 210   1         mDelay(5);
 211   1         LedCtrl = LedCtrl | 0xf0;
 212   1      
 213   1         LedPort = LED_Disp[DisBuff[1]]&0x7f;
 214   1         LedCtrl = LedCtrl & 0xbf;
 215   1         mDelay(5);
 216   1         LedCtrl = LedCtrl | 0xf0;
 217   1      
 218   1         LedPort = LED_Disp[DisBuff[2]];
 219   1         LedCtrl = LedCtrl & 0xdf;
 220   1         mDelay(5);
 221   1         LedCtrl = LedCtrl | 0xf0;
 222   1      
 223   1         LedPort = LED_Disp[DisBuff[3]];
 224   1         LedCtrl = LedCtrl & 0xef;
 225   1         mDelay(5);
 226   1         LedCtrl = LedCtrl | 0xf0;
 227   1      }
 228          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    614    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     43       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
