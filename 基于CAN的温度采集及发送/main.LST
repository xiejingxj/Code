C51 COMPILER V9.01   MAIN                                                                  07/19/2016 14:58:26 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          
   2          #include <reg52.h>
   3          #include "sjapelican.h"
   4          #include "config.h"
   5          #include"temp.h"
   6          
   7          //INT0按键为计数按键
   8          void INT0_Data(void) interrupt 0
   9          {
  10   1          EA = 0;
  11   1          Txd_data++; //存储计数结果，并为待发送的数据
  12   1              Peli_TXD();
  13   1          EA = 1;
  14   1      }
  15          //接收数据函数，在中断服务程序中调用
  16          void Peli_RXD(void) interrupt 2
  17          {
  18   1      
  19   1          uint8 data Status;
  20   1          EA = 0;//关CPU中断
  21   1      
  22   1          Status = SJA_IR;
  23   1          if(Status & RI_BIT)
  24   1          {//IR.0 = 1 接收中断
  25   2              RX_buffer[0] =  SJA_RBSR0;
  26   2              RX_buffer[1] =  SJA_RBSR1;
  27   2              RX_buffer[2] =  SJA_RBSR2;
  28   2              RX_buffer[3] =  SJA_RBSR3;
  29   2              RX_buffer[4] =  SJA_RBSR4;
  30   2              RX_buffer[5] =  SJA_RBSR5;
  31   2              RX_buffer[6] =  SJA_RBSR6;
  32   2              RX_buffer[7] =  SJA_RBSR7;
  33   2              RX_buffer[8] =  SJA_RBSR8;
  34   2              RX_buffer[9] =  SJA_RBSR9;
  35   2              RX_buffer[10] =  SJA_RBSR10;
  36   2              RX_buffer[11] =  SJA_RBSR11;
  37   2              RX_buffer[12] =  SJA_RBSR12;
  38   2      
  39   2              SJA_CMR = RRB_BIT;//释放接收缓冲器位
  40   2              Status = SJA_ALC;//释放仲裁随时捕捉寄存器
  41   2              Status = SJA_ECC;//释放错误代码捕捉寄存器
  42   2          }
  43   1          SJA_IER = RIE_BIT;// .0=1--接收中断使能；
  44   1      
  45   1              Rxd_data = RX_buffer[5];
  46   1      
  47   1          EA = 1;//打开CPU中断
  48   1      }
  49          //CPU初始化
  50          void MCU_Init(void)
  51          {
  52   1              SJA_RST = 0;//SJA1000复位有效
  53   1              mDelay(10);     //延时
  54   1          SJA_RST = 1;//CAN总线复位管脚,复位无效
  55   1          SJA_CS = 0;//CAN总线片选有效
C51 COMPILER V9.01   MAIN                                                                  07/19/2016 14:58:26 PAGE 2   

  56   1      
  57   1          EX1 = 1;//外部中断1使能；CAN总线接收中断
  58   1          IT1 = 1;//CAN总线接收中断，低电平触发
  59   1      
  60   1          IT0 = 1;//外部中断0负边沿触发
  61   1          EX0 = 1;//打开外部中断0
  62   1      
  63   1          EA = 1; //打开总中断
  64   1      }
  65          
  66          void Temp2RxdData()
  67          {       
  68   1              Txd_data1 = (TempH<<4) |(TempL>>4) ;
  69   1              Txd_data2 = TempL&0xf ;
  70   1      }
  71          
  72          //主函数
  73          void main(void)
  74          {
  75   1              MCU_Init();
  76   1          Peli_Init();
  77   1              temp_init();
  78   1              Peli_TXD();
  79   1          while(1)
  80   1              {
  81   2                  temp();
  82   2                      Peli_TXD();
  83   2              }
  84   1      }
  85          
  86          //SJA1000 的初始化
  87          void Peli_Init(void)
  88          {
  89   1          uint8 bdata Status;
  90   1          
  91   1              //1、SJA1000复位
  92   1              do
  93   1          {//  .0=1---reset MODRe,进入复位模式，以便设置相应的寄存器
  94   2           //防止未进入复位模式，重复写入
  95   2              SJA_MOD = RM_BIT |AFM_BIT;
  96   2              Status = SJA_MOD ;
  97   2          }
  98   1          while(!(Status & RM_BIT));
  99   1      
 100   1              //2.进入PeliCAN工作模式 
 101   1          SJA_CDR  = CANMode_BIT|CLKOff_BIT;// CDR.3=1--时钟关闭, .7=0---basic CAN, .7=1---Peli CAN
 102   1      
 103   1          SJA_BTR0 = 0x03;
 104   1          SJA_BTR1 = 0x1c;//16M晶振，波特率125Kbps
 105   1      
 106   1          SJA_IER  = RIE_BIT;// .0=1--接收中断使能；  .1=0--关闭发送中断使能
 107   1          SJA_OCR  = NormalMode|Tx0PullDn|OCPOL1_BIT|Tx1PullUp;// 配置输出控制寄存器
 108   1          SJA_CMR  = RRB_BIT;//释放接收缓冲器
 109   1      
 110   1          SJA_ACR0  = 0x01;
 111   1          SJA_ACR1  = 0x02;
 112   1          SJA_ACR2  = 0x03;
 113   1          SJA_ACR3  = 0x04;//初始化标示码
 114   1      
 115   1          SJA_AMR0  = 0xff;
 116   1          SJA_AMR1  = 0xff;
 117   1          SJA_AMR2  = 0xff;
C51 COMPILER V9.01   MAIN                                                                  07/19/2016 14:58:26 PAGE 3   

 118   1          SJA_AMR3  = 0xff;//初始化掩码
 119   1      
 120   1          do
 121   1          {
 122   2              SJA_MOD   = AFM_BIT;
 123   2              Status  = SJA_MOD;
 124   2           }
 125   1          while( Status & RM_BIT );
 126   1      
 127   1      }
 128          //发送数据函数
 129          void Peli_TXD( void )
 130          {
 131   1          uint8 data Status;
 132   1          
 133   1          Txd_data1 = (TempH<<4) |(TempL>>4) ;
 134   1              Txd_data2 = TempL&0xf ;
 135   1      
 136   1      //初始化标示码头信息
 137   1          TX_buffer[0] = 0x88;//.7=0扩展帧；.6=0数据帧; .3=1数据长度
 138   1      
 139   1          TX_buffer[1] = 0x01;//本节点地址
 140   1          TX_buffer[2] = 0x02;//
 141   1          TX_buffer[3] = 0x03;//
 142   1          TX_buffer[4] = 0x04;//
 143   1      
 144   1      //初始化发送数据单元
 145   1          TX_buffer[5]  = Txd_data;
 146   1          TX_buffer[6]  = Txd_data1;
 147   1          TX_buffer[7]  = Txd_data2;
 148   1          TX_buffer[8]  = 0x44;//
 149   1          TX_buffer[9]  = 0x55;//
 150   1          TX_buffer[10] = 0x66;//
 151   1          TX_buffer[11] = 0x77;//
 152   1          TX_buffer[12] = 0x88;//
 153   1      
 154   1          do
 155   1          {
 156   2              Status = SJA_SR;
 157   2          }
 158   1          while( Status & RS_BIT);  //SR.4=1 正在接收，等待
 159   1          
 160   1          do
 161   1          {
 162   2              Status = SJA_SR;
 163   2          }
 164   1          while(!(Status & TCS_BIT)); //SR.3=0,发送请求未处理完，等待
 165   1      
 166   1          do
 167   1          {
 168   2              Status = SJA_SR;
 169   2          }
 170   1          while(!(Status & TBS_BIT)); //SR.2=0,发送缓冲器被锁。等待
 171   1      
 172   1          SJA_TBSR0  = TX_buffer[0];
 173   1          SJA_TBSR1  = TX_buffer[1];
 174   1          SJA_TBSR2  = TX_buffer[2];
 175   1          SJA_TBSR3  = TX_buffer[3];
 176   1          SJA_TBSR4  = TX_buffer[4];
 177   1          SJA_TBSR5  = TX_buffer[5];
 178   1          SJA_TBSR6  = TX_buffer[6];
 179   1          SJA_TBSR7  = TX_buffer[7];
C51 COMPILER V9.01   MAIN                                                                  07/19/2016 14:58:26 PAGE 4   

 180   1          SJA_TBSR8  = TX_buffer[8];
 181   1          SJA_TBSR9  = TX_buffer[9];
 182   1          SJA_TBSR10 = TX_buffer[10];
 183   1          SJA_TBSR11 = TX_buffer[11];
 184   1          SJA_TBSR12  = TX_buffer[12];
 185   1      
 186   1          SJA_CMR = TR_BIT;//置位发送接收请求
 187   1      }
 188          //延时函数
 189          void mDelay(uint16 mtime)
 190          {
 191   1              for(; mtime > 0; mtime--)
 192   1              {
 193   2                      uint8 j = 244;
 194   2                      while(--j);
 195   2              }
 196   1      }
 197          //数码管显示函数
 198          void LED_Disp_Seg7()
 199          {
 200   1         LedCtrl = LedCtrl | 0xf0;
 201   1      
 202   1         DisBuff[0]   = Txd_data%10;//取个位数
 203   1         DisBuff[1]   = Txd_data%100/10; //取十位数
 204   1         DisBuff[2]   = Rxd_data%10;     //百位数
 205   1         DisBuff[3]   = Rxd_data%100/10; //千位数
 206   1        
 207   1         LedPort = LED_Disp[DisBuff[0]];
 208   1         LedCtrl = LedCtrl & 0x7f;
 209   1         mDelay(5);
 210   1         LedCtrl = LedCtrl | 0xf0;
 211   1      
 212   1         LedPort = LED_Disp[DisBuff[1]];
 213   1         LedCtrl = LedCtrl & 0xbf;
 214   1         mDelay(5);
 215   1         LedCtrl = LedCtrl | 0xf0;
 216   1      
 217   1         LedPort = LED_Disp[DisBuff[2]];
 218   1         LedCtrl = LedCtrl & 0xdf;
 219   1         mDelay(5);
 220   1         LedCtrl = LedCtrl | 0xf0;
 221   1      
 222   1         LedPort = LED_Disp[DisBuff[3]];
 223   1         LedCtrl = LedCtrl & 0xef;
 224   1         mDelay(5);
 225   1         LedCtrl = LedCtrl | 0xf0;
 226   1      }
 227          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    603    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     35       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
